[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Project Euler with R, Julia and Python",
    "section": "",
    "text": "Preface\nSolving the problems in Project Euler using R, Julia and Python.\nThis is intended to be an exercise on algorithms and optimization, and, of course, to show how fast Julia is :D\nThe Julia solutions are written by G. Vituri; the Python ones are written by William; the R ones by Laura and the rest of my team."
  },
  {
    "objectID": "p1_10.html#prelude",
    "href": "p1_10.html#prelude",
    "title": "1  Problems 1-10",
    "section": "Prelude",
    "text": "Prelude\nFunctions shared among some exercises.\n\nJulia\n\n# define a function that give prime numbers up to n\nfunction sieve_of_eratosthenes(n::Integer)\n  sieve = trues(n)  # Create a boolean array to mark primes\n  \n  # Set the multiples of primes as false (not prime)\n  for i in 2:isqrt(n)\n    if sieve[i]\n      for j in i^2:i:n\n        sieve[j] = false\n      end\n    end\n  end\n  \n  primes = filter(x -> sieve[x], 2:n)  # Filter out non-primes\n  \n  return primes\nend;"
  },
  {
    "objectID": "p1_10.html#problem-1",
    "href": "p1_10.html#problem-1",
    "title": "1  Problems 1-10",
    "section": "Problem 1",
    "text": "Problem 1\n\n\n\n\n\n\nProblem\n\n\n\n\nIf we list all the natural numbers below \\(10\\) that are multiples of \\(3\\) or \\(5\\), we get \\(3, 5, 6\\) and \\(9\\). The sum of these multiples is \\(23\\).\n\n\nFind the sum of all the multiples of \\(3\\) or \\(5\\) below \\(1000\\).\n\n\n\n\nJulia\n\nfunction p1()\n  [x for x ∈ 1:999 if (x % 3 == 0 || x % 5 == 0)] |> sum\nend;\n\np1()\n\n233168\n\n\n\nusing BenchmarkTools;\n@benchmark p1()\n\nBenchmarkTools.Trial: 10000 samples with 6 evaluations.\n Range (min … max):  5.302 μs … 600.896 μs  ┊ GC (min … max): 0.00% … 96.99%\n Time  (median):     6.178 μs               ┊ GC (median):    0.00%\n Time  (mean ± σ):   7.180 μs ±  10.043 μs  ┊ GC (mean ± σ):  3.43% ±  2.66%\n\n   ▃▄▅▇▇█▅▄▃▂▂▂▃▃▄▄▄▃▃▃▃▃▂▁▂▁▁▁ ▁             ▁               ▂\n  ██████████████████████████████████▇▇█▇▇▇▇▇████▇▇▆▅▅▆▆▆▄▃▅▅▅ █\n  5.3 μs       Histogram: log(frequency) by time      13.2 μs <\n\n Memory estimate: 7.61 KiB, allocs estimate: 6.\n\n\n\n\nR\n\np1 = function() {\n  \n  sequencia_numeros = seq(999)\n  mult_3 = NULL\n  mult_5 = NULL\n  \n  for (i in sequencia_numeros) {\n    \n    if(i %% 3 == 0) {\n      \n      mult_3 = c(mult_3, i)\n      \n    } else if (i %% 5 == 0) {\n      \n      mult_5 = c(mult_5, i)\n      \n    }\n    \n  }\n  \n  return(sum(c(mult_3, mult_5)))\n  \n}\n\np1()\n\n[1] 233168\n\n\n\nbench::mark(p1())\n\n# A tibble: 1 × 6\n  expression      min   median `itr/sec` mem_alloc `gc/sec`\n  <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl>\n1 p1()          536µs    670µs     1355.     269KB     21.4\n\n\n\n\nR\n\np1 = function(){\n  soma = 0\n  \n  for (numero in 1:999) {\n    if(numero %% 3 == 0 || numero %% 5 == 0){\n      soma = soma + numero\n    }\n  }\n  return(soma)\n}\n\np1()\n\n[1] 233168\n\n\n\nbench::mark(p1())\n\n# A tibble: 1 × 6\n  expression      min   median `itr/sec` mem_alloc `gc/sec`\n  <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl>\n1 p1()          292µs    342µs     2669.        0B     36.7\n\n\n\n\nPython\n\ndef p1(n = 1000):\n  return sum([x for x in range(n) if x % 3 == 0 or x % 5 == 0]);\n\np1()\n\n233168\n\n\n\n# p1()"
  },
  {
    "objectID": "p1_10.html#problem-2",
    "href": "p1_10.html#problem-2",
    "title": "1  Problems 1-10",
    "section": "Problem 2",
    "text": "Problem 2\n\n\n\n\n\n\nProblem\n\n\n\n\nEach new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with \\(1\\) and \\(2\\), the first \\(10\\) terms will be: \\(1, 2, 3, 5, 8, 13, 21, 34, 55, 89, \\dots\\)\n\n\nBy considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.\n\n\n\n\nJulia\n\nfunction p2()\n  # start with the first 2 terms\n  fibo = [1, 2]\n  \n  # while smaller than 4_000_000, keep adding\n  while true\n    current_fibo_term = fibo[end] + fibo[end - 1]\n    if current_fibo_term < 4_000_000\n      push!(fibo, current_fibo_term)\n    else \n      break\n    end        \n  end\n  \n  # sum the results\n  return [x for x ∈ fibo if iseven(x)] |> sum\nend;\np2()\n\n4613732\n\n\n\n  1+1\n\n2\n\n\n\nusing BenchmarkTools;\n@benchmark p2()\n\nBenchmarkTools.Trial: 10000 samples with 172 evaluations.\n Range (min … max):  598.605 ns … 39.056 μs  ┊ GC (min … max): 0.00% … 97.21%\n Time  (median):     701.297 ns              ┊ GC (median):    0.00%\n Time  (mean ± σ):   825.939 ns ±  1.307 μs  ┊ GC (mean ± σ):  9.41% ±  5.95%\n\n   ▃▄▆▇██▆▅▅▅▄▄▃▃▃▂▂▂▁▁▁▁▁                                     ▂\n  ▇███████████████████████████▇▇██▇▇▆▇▇▇▇▇▇▇▅▇▆▅▅▅▅▄▆▄▄▅▃▅▅▅▅▄ █\n  599 ns        Histogram: log(frequency) by time      1.53 μs <\n\n Memory estimate: 1.02 KiB, allocs estimate: 7.\n\n\n\n\nJulia (optimized)\n\nfunction p2()\n    a, b = 1, 2\n    sum = 2\n    while true\n        current_fibo_term = a + b\n        current_fibo_term > 4_000_000 && break\n        iseven(current_fibo_term) && (sum += current_fibo_term)\n        a, b = b, current_fibo_term\n    end\n    return sum\nend;\np2()\n\n4613732\n\n\n\nusing BenchmarkTools;\n@benchmark p2()\n\nBenchmarkTools.Trial: 10000 samples with 995 evaluations.\n Range (min … max):  21.368 ns … 86.718 ns  ┊ GC (min … max): 0.00% … 0.00%\n Time  (median):     23.915 ns              ┊ GC (median):    0.00%\n Time  (mean ± σ):   24.750 ns ±  3.644 ns  ┊ GC (mean ± σ):  0.00% ± 0.00%\n\n  ▃▄▁▄▃▅█▅▅▃▁  ▁ ▁  ▁ ▁     ▁   ▁                             ▁\n  ███████████▇▆█▅█▅▅█▅█▅▆▆█▇██▇▇█▇▆▇▆▆▅▅▅▆▆▅▆▆▄▅▄▄▅▅▅▅▅▅▄▅▄▄▅ █\n  21.4 ns      Histogram: log(frequency) by time      43.2 ns <\n\n Memory estimate: 0 bytes, allocs estimate: 0.\n\n\n\n\nR\n\np2 = function() {\n  ultimofibo = 2\n  soma = 2\n  \n  L = list()\n  L[[1]] = 1\n  L[[2]] = 2\n  i = 3\n  while(ultimofibo <= 4000000){\n    \n    L[[i]] = L[[i - 1]] + L[[i - 2]]\n    \n    ultimofibo = L[[i]]\n    i = i + 1\n    \n    if(ultimofibo%%2 == 0){\n      soma = soma + ultimofibo\n    }\n  }\n  \n  soma\n}\n\np2()\n\n[1] 4613732\n\n\n\nbench::mark(p2())\n\n# A tibble: 1 × 6\n  expression      min   median `itr/sec` mem_alloc `gc/sec`\n  <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl>\n1 p2()         22.5µs   26.2µs    33269.    2.37KB     13.3\n\n\n\n\nR (optimized)\n\np2 = function() {\n  ultimofibo = 2\n  valor = 2\n  x0 = 1\n  x1 = 2\n  \n  while (ultimofibo < 4000000) {\n    x2 = x0 + x1\n    ultimofibo = x2\n    x0 = x1\n    x1 = x2\n    if(ultimofibo %% 2 == 0){\n      if (ultimofibo < 4000000){\n        valor = valor + ultimofibo \n      }\n    }\n  }\n  \n  valor\n}\n\np2()\n\n[1] 4613732\n\n\n\nbench::mark(p2())\n\n# A tibble: 1 × 6\n  expression      min   median `itr/sec` mem_alloc `gc/sec`\n  <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl>\n1 p2()         6.91µs   7.81µs   119574.        0B     12.0\n\n\n\n\nPython\n\ndef p2(roof = 4 * 10 ** 6):\n  fibo = [1,2]\n  while True:\n    fibo = fibo + [fibo[-1] + fibo[-2]]\n    if fibo[-1] > roof:\n      break\n    return sum([x for x in fibo if x % 2  == 0])\n\n\n  # %timeit p2()\n\n\n\nPython (optimized)\n\ndef p2(roof = 4 * 10 ** 6):\n    a, b = 1, 2\n    even_sum = 0\n    while True:\n        if b % 2 == 0:\n            even_sum += b\n        a, b = b, a + b\n        if b > roof:\n            break\n    return even_sum\n\n\n  # %timeit p2()"
  },
  {
    "objectID": "p1_10.html#problem-3-1",
    "href": "p1_10.html#problem-3-1",
    "title": "1  Problems 1-10",
    "section": "Problem 3",
    "text": "Problem 3\n\n\n\n\n\n\nProblem\n\n\n\n\nThe prime factors of \\(13195\\) are \\(5, 7, 13\\) and \\(29\\).\n\n\nWhat is the largest prime factor of the number \\(600851475143\\)?\n\n\n\n\nJulia\n\nfunction p3()\n  n = 600851475143\n  \n  # get all primes lesses than sqrt(n)\n  possible_primes = sieve_of_eratosthenes(isqrt(n)) # see prelude\n  \n  # get the biggest one\n  id = findlast(x -> n % x == 0, possible_primes)    \n  return possible_primes[id]\nend;\n\np3()\n\n6857\n\n\n\nusing BenchmarkTools;\n@benchmark p3()\n\nBenchmarkTools.Trial: 1131 samples with 1 evaluation.\n Range (min … max):  3.911 ms …   7.706 ms  ┊ GC (min … max): 0.00% … 0.00%\n Time  (median):     4.273 ms               ┊ GC (median):    0.00%\n Time  (mean ± σ):   4.414 ms ± 385.816 μs  ┊ GC (mean ± σ):  1.41% ± 3.20%\n\n       ▄▂▇█▆▄▁                                                 \n  ▂▁▁▁▃███████▅▅▅▄▄▄▅▅▅▅▅▅▄▄▃▃▃▃▂▂▂▃▃▃▂▂▂▂▁▂▂▂▂▁▁▂▁▂▂▁▂▁▂▂▂▁▂ ▃\n  3.91 ms         Histogram: frequency by time        5.97 ms <\n\n Memory estimate: 6.48 MiB, allocs estimate: 8.\n\n\n\n\nPython\n\n# trying without https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\nimport math\n\ndef p3(n):\n    \n    larger_prime_divisor = None\n    for lesser in range(int(n / 2 // 1), 1, -1):\n        \n        divides = n % lesser == 0\n        if divides:\n            \n            # a quick test if 'lesser' is not prime\n            if (lesser - 1) % 6 > 0:\n                if (lesser + 1) % 6 > 0:\n                    if lesser not in [2,3]:\n                        continue\n            \n            # decide if 'lesser' is prime by definition,\n            # but using the fact that the greatest prime divisor of 'lesser',\n            # if it is not 'lesser' itself and it exists, cannot be\n            # greater than sqrt(lesser)\n            # print(lesser)\n            is_prime = True            \n            j = 2\n            floor = math.sqrt(lesser)\n            # floor = lesser / 2 // 1\n            while j <= floor:\n                # print('   ' + str(j))\n                is_prime = not lesser % j == 0\n                if not is_prime:\n                    break\n                j += 1\n            \n            if is_prime:\n                larger_prime_divisor = lesser\n                break\n    \n    if larger_prime_divisor == None:\n        larger_prime_divisor = n\n    \n    return larger_prime_divisor\n\n\n# %timeit p3(600851475143)\nprint('not optimized just yet!')\n\nnot optimized just yet!"
  },
  {
    "objectID": "p1_10.html#problem-4-1",
    "href": "p1_10.html#problem-4-1",
    "title": "1  Problems 1-10",
    "section": "Problem 4",
    "text": "Problem 4\n\n\n\n\n\n\nProblem\n\n\n\n\nA palindromic number reads the same both ways. The largest palindrome made from the product of two \\(2\\)-digit numbers is \\(9009 = 91 \\times 99\\).\n\n\nFind the largest palindrome made from the product of two \\(3\\)-digit numbers.\n\n\n\n\nJulia\n\nfunction is_palindrome(s::AbstractString)\n    l = length(s)\n\n    for i ∈ 1:fld(l, 2)\n        s[i] != s[l + 1 - i] && return false        \n    end\n\n    return true\nend;\n\nis_palindrome(n::Integer) = is_palindrome(string(n));\n\nfunction p4()\n  a, b, largest_palindrome = 0, 0, 0\n  \n  for x ∈ reverse(100:999)\n      for y ∈ reverse(100:999)\n          x < y && continue\n          p = x * y\n          p < largest_palindrome && break # we can break the inner loop, because the next product is going to be even lesser\n          if is_palindrome(p)\n            a, b, largest_palindrome = x, y, p \n          end\n      end\n  end\n\n  # if no palindrome was found:\n  return (a, b, a*b)\nend;\n\np4()\n\n(993, 913, 906609)\n\n\n\nusing BenchmarkTools;\n@benchmark p4()\n\nBenchmarkTools.Trial: 7963 samples with 1 evaluation.\n Range (min … max):  524.065 μs …   4.392 ms  ┊ GC (min … max): 0.00% … 78.79%\n Time  (median):     592.334 μs               ┊ GC (median):    0.00%\n Time  (mean ± σ):   625.303 μs ± 304.062 μs  ┊ GC (mean ± σ):  5.26% ±  8.89%\n\n  ▄█▄▂                                                          ▁\n  █████▅▅▄▃▁▃▁▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▆ █\n  524 μs        Histogram: log(frequency) by time        3.3 ms <\n\n Memory estimate: 526.28 KiB, allocs estimate: 12248.\n\n\n\ndef is_palindrome(x):\n    idx = len(str(x)) // 2\n    return str(x)[:idx] == str(x)[-idx:][::-1]\n\ndef p4():\n    three_digits = range(100, 1000, 1)\n    for i in three_digits:\n        for j in three_digits:\n            prod = i * j\n            if is_palindrome(prod):\n                return prod, i, j\n    \n    return None\n\n\n# %timeit p4()"
  },
  {
    "objectID": "p1_10.html#problem-5-1",
    "href": "p1_10.html#problem-5-1",
    "title": "1  Problems 1-10",
    "section": "Problem 5",
    "text": "Problem 5\n\n\n\n\n\n\nProblem\n\n\n\n\n\\(2520\\) is the smallest number that can be divided by each of the numbers from \\(1\\) to \\(10\\) without any remainder.\n\n\nWhat is the smallest positive number that is evenly divisibledivisible with no remainder by all of the numbers from \\(1\\) to \\(20\\)?\n\n\n\n\nJulia\n\nfunction prime_decomposition(n::Integer)\n    possible_primes = sieve_of_eratosthenes(n)\n    temp_n = n\n    dec = Int32[]\n\n    while temp_n > 1\n        for p ∈ possible_primes\n            q, r = divrem(temp_n, p)            \n            if iszero(r)\n                temp_n = temp_n ÷ p\n                push!(dec, p)\n                break\n            end\n        end\n    end\n    return dec\nend;\n\nfunction p5()\n    decomposition = map(prime_decomposition, 2:20)\n    distinct_primes = vcat(decomposition...) |> unique\n\n    count_matrix = \n    map(distinct_primes) do p\n        map(decomposition) do d\n            count(==(p), d)\n        end\n    end |> stack\n\n    primes_powers = map(maximum, eachcol(count_matrix))\n\n    n = (distinct_primes .^ primes_powers) |> prod\n\n    return n\nend;\n\np5()\n\n232792560\n\n\n\nusing BenchmarkTools;\n@benchmark p5()\n\nBenchmarkTools.Trial: 10000 samples with 1 evaluation.\n Range (min … max):  10.851 μs …  3.277 ms  ┊ GC (min … max): 0.00% … 98.81%\n Time  (median):     12.502 μs              ┊ GC (median):    0.00%\n Time  (mean ± σ):   13.699 μs ± 32.718 μs  ┊ GC (mean ± σ):  2.36% ±  0.99%\n\n      ▂▆██▃                                                    \n  ▂▃▆██████▆▄▂▃▃▃▃▃▃▃▃▃▃▃▃▃▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁ ▂\n  10.9 μs         Histogram: frequency by time        23.4 μs <\n\n Memory estimate: 12.67 KiB, allocs estimate: 143.\n\n\n\n\nPython\n\nimport numpy as np\nimport itertools\n\ndef evenly_divisible(x, y):\n    return x % y == 0\n\n# def evenly_divisible_map(x, roof):\n#     return all(map(evenly_divisible, np.repeat(x, roof), range(1, roof + 1)))\n# \n# def p5(roof = 20):\n#     x = roof\n#     while True:\n#         if evenly_divisible_map(x, roof):\n#             return x\n#         x += 1\n\ndef p5(roof = 20, silent = True):\n    # pdb.set_trace()\n    seq = [1, 2]\n    if not silent:\n        print('  adding: 2')\n        \n    candidate = 3\n    while True:\n        \n        # product two by two, then three by three, and it goes on\n        for r in range(2, len(seq) + 1):   \n        \n            possible_combinations = itertools.combinations(seq, r)\n            is_product = False\n            for comb in possible_combinations:\n                prod = np.prod(comb)\n                \n                # if the candidate is a product of numbers in sequence, we don't add it to the sequence\n                if candidate == prod:\n                    is_product = True\n                    break\n            \n            if is_product:\n                break\n        \n        # if it is not a product, take the candidate and divide it\n        # by all the numbers within the sequence that divide it\n        # That way, the sequence will have a subsequence of elements whose product\n        # divides the candidate\n        if not is_product:\n            candidate_divisors = [x for x in seq if evenly_divisible(candidate, x)]\n            to_add = int(candidate / np.prod(candidate_divisors))\n            seq.append(to_add)\n            if not silent:\n                print('candidate:', candidate)\n                print('  adding:', to_add)\n        \n        if candidate == roof:\n            break\n        \n        candidate += 1\n    \n    return np.prod(seq)\n\n\n# %timeit p5()"
  },
  {
    "objectID": "p1_10.html#problem-6-1",
    "href": "p1_10.html#problem-6-1",
    "title": "1  Problems 1-10",
    "section": "Problem 6",
    "text": "Problem 6\n\n\n\n\n\n\nProblem\n\n\n\n\nThe sum of the squares of the first ten natural numbers is \\(1^2+ 2 ^2+ \\dots + 10^2 = 385.\\)\n\n\nThe square of the sum of the first ten natural numbers is \\((1+ 2+ \\dots + 10)^2 = 3025.\\)\n\n\nHence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is \\(3025-385 = 2640.\\)\n\n\nFind the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.\n\n\n\n\nJulia\n\nfunction p6()\n  sum(1:100)^2 - sum((1:100).^2)\nend;\np6()\n\n25164150\n\n\n\nusing BenchmarkTools;\n@benchmark p6()\n\nBenchmarkTools.Trial: 10000 samples with 951 evaluations.\n Range (min … max):   94.325 ns …  1.018 μs  ┊ GC (min … max): 0.00% … 68.55%\n Time  (median):     107.611 ns              ┊ GC (median):    0.00%\n Time  (mean ± σ):   128.816 ns ± 95.806 ns  ┊ GC (mean ± σ):  8.45% ± 10.01%\n\n  ██▇▅▄▂▁                                                      ▂\n  ██████████▇▆▆▇▆▅▁▁▁▁▅▄▆▆▆▄▆▄▄▁▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▄▅▄▅▅▆▅▄▆▆▇▆ █\n  94.3 ns       Histogram: log(frequency) by time       785 ns <\n\n Memory estimate: 896 bytes, allocs estimate: 1.\n\n\n\n\nR\n\np6 = function(){\n  S1 =0\n  S2 = 0\n  \n  for(i in 1:100){\n    S1 = S1+i**2\n    S2 = S2+i\n  }\n  S2 = S2**2\n  \n  S1\n  S2\n  return(S2-S1)\n}\n\np6()\n\n[1] 25164150\n\n\n\nbench::mark(p6())\n\n# A tibble: 1 × 6\n  expression      min   median `itr/sec` mem_alloc `gc/sec`\n  <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl>\n1 p6()         4.79µs   5.35µs   172780.        0B        0\n\n\n\n\nR (shorter)\n\np6 = function() {\n  sum(1:100)^2 - sum((1:100)^2)\n}\n\np6()\n\n[1] 25164150\n\n\n\nbench::mark(p6())\n\n# A tibble: 1 × 6\n  expression      min   median `itr/sec` mem_alloc `gc/sec`\n  <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl>\n1 p6()         1.18µs   1.51µs   533498.    32.3KB     53.4"
  },
  {
    "objectID": "p1_10.html#problem-7-1",
    "href": "p1_10.html#problem-7-1",
    "title": "1  Problems 1-10",
    "section": "Problem 7",
    "text": "Problem 7\n\n\n\n\n\n\nProblem\n\n\n\n\nBy listing the first six prime numbers: \\(2, 3, 5, 7, 11\\), and \\(13\\), we can see that the \\(6\\)th prime is \\(13\\).\n\n\nWhat is the \\(10\\,001\\)st prime number?\n\n\n\n\nJulia\n\nis_divisible_by(n::Integer, q::Integer) = n % q == 0;\n\nfunction find_next_prime(primes)\n    n = primes[end]\n    while true        \n        n += 2\n\n        not_prime = false\n    \n        for q ∈ primes\n            not_prime = is_divisible_by(n, q)\n            if not_prime\n                break                \n            end            \n        end\n\n        if not_prime \n            continue \n        end\n    \n        return(n)        \n    end    \nend;\n\nfunction find_n_primes(n::Integer)\n    primes = [2, 3]\n    while length(primes) < n\n        next_prime = find_next_prime(primes)\n        push!(primes, next_prime)\n    end\n\n    return primes\nend;\n\np7() = find_n_primes(10_001)[end];\np7()\n\n104743\n\n\n\nusing BenchmarkTools;\n@benchmark p7()\n\nBenchmarkTools.Trial: 36 samples with 1 evaluation.\n Range (min … max):  140.696 ms … 147.573 ms  ┊ GC (min … max): 0.00% … 0.00%\n Time  (median):     142.054 ms               ┊ GC (median):    0.00%\n Time  (mean ± σ):   142.188 ms ±   1.004 ms  ┊ GC (mean ± σ):  0.00% ± 0.00%\n\n          ▂  █▄█                                                 \n  ▄▁▁▁▁▁▁▆█▄████▄▄▁▄▁▄▄▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▄ ▁\n  141 ms           Histogram: frequency by time          148 ms <\n\n Memory estimate: 326.56 KiB, allocs estimate: 9."
  },
  {
    "objectID": "p1_10.html#problem-8-1",
    "href": "p1_10.html#problem-8-1",
    "title": "1  Problems 1-10",
    "section": "Problem 8",
    "text": "Problem 8\n\n\n\n\n\n\nProblem\n\n\n\n\nThe four adjacent digits in the \\(1000\\)-digit number that have the greatest product are \\(9 \\times 9 \\times 8 \\times 9 = 5832\\).\n\n\n73167176531330624919225119674426574742355349194934 96983520312774506326239578318016984801869478851843 85861560789112949495459501737958331952853208805511 12540698747158523863050715693290963295227443043557 66896648950445244523161731856403098711121722383113 62229893423380308135336276614282806444486645238749 30358907296290491560440772390713810515859307960866 70172427121883998797908792274921901699720888093776 65727333001053367881220235421809751254540594752243 52584907711670556013604839586446706324415722155397 53697817977846174064955149290862569321978468622482 83972241375657056057490261407972968652414535100474 82166370484403199890008895243450658541227588666881 16427171479924442928230863465674813919123162824586 17866458359124566529476545682848912883142607690042 24219022671055626321111109370544217506941658960408 07198403850962455444362981230987879927244284909188 84580156166097919133875499200524063689912560717606 05886116467109405077541002256983155200055935729725 71636269561882670428252483600823257530420752963450\n\n\nFind the thirteen adjacent digits in the \\(1000\\)-digit number that have the greatest product. What is the value of this product?\n\n\n\n\nJulia\n\nfunction p8()\n  big_string = \"73167176531330624919225119674426574742355349194934\n      96983520312774506326239578318016984801869478851843\n      85861560789112949495459501737958331952853208805511\n      12540698747158523863050715693290963295227443043557\n      66896648950445244523161731856403098711121722383113\n      62229893423380308135336276614282806444486645238749\n      30358907296290491560440772390713810515859307960866\n      70172427121883998797908792274921901699720888093776\n      65727333001053367881220235421809751254540594752243\n      52584907711670556013604839586446706324415722155397\n      53697817977846174064955149290862569321978468622482\n      83972241375657056057490261407972968652414535100474\n      82166370484403199890008895243450658541227588666881\n      16427171479924442928230863465674813919123162824586\n      17866458359124566529476545682848912883142607690042\n      24219022671055626321111109370544217506941658960408\n      07198403850962455444362981230987879927244284909188\n      84580156166097919133875499200524063689912560717606\n      05886116467109405077541002256983155200055935729725\n      71636269561882670428252483600823257530420752963450\" |> filter(isnumeric) # keep only numeric characters\n  \n  biggest_product = 0\n  winner_string = \"\"\n  amount_of_digits = 13\n  \n  for i in (amount_of_digits + 1):length(big_string)\n    current_string = collect(big_string[i-amount_of_digits : i])\n    \n    p = map(x -> parse(Int32, x), current_string) |> prod\n    if p > biggest_product\n      biggest_product = p\n      winner_string = current_string\n    end\n  end\n  \n  return reduce(*, winner_string), biggest_product\nend;\n\np8()\n\n(\"97536978179778\", 70573265280)\n\n\n\nusing BenchmarkTools;\n@benchmark p8()\n\nBenchmarkTools.Trial: 10000 samples with 1 evaluation.\n Range (min … max):  330.397 μs …   2.240 ms  ┊ GC (min … max): 0.00% … 82.07%\n Time  (median):     373.630 μs               ┊ GC (median):    0.00%\n Time  (mean ± σ):   386.494 μs ± 117.768 μs  ┊ GC (mean ± σ):  2.19% ±  5.88%\n\n        ▁ ▁▅▅▃▆█▆▄▃▃▂▁▁                                         ▁\n  ▅▃▃▅▆▇█████████████████▇▇██▇██▇█▇▇▆▆▇▆▆▅▆▅▆▅▅▅▅▅▅▄▄▅▄▅▃▄▅▄▄▄▅ █\n  330 μs        Histogram: log(frequency) by time        526 μs <\n\n Memory estimate: 249.06 KiB, allocs estimate: 3000."
  },
  {
    "objectID": "p1_10.html#problem-9-1",
    "href": "p1_10.html#problem-9-1",
    "title": "1  Problems 1-10",
    "section": "Problem 9",
    "text": "Problem 9\n\n\n\n\n\n\nProblem\n\n\n\n\nA Pythagorean triplet is a set of three natural numbers, \\(a \\lt b \\lt c\\), for which, \\(a^2 + b^2 = c^2.\\)\n\n\nFor example, \\(3^2 + 4^2 = 9 + 16 = 25 = 5^2\\).\n\n\nThere exists exactly one Pythagorean triplet for which \\(a + b + c = 1000\\).Find the product \\(abc\\).\n\n\n\n\nJulia\n\nfunction p9()\n    for a ∈ 1:999\n        for b ∈ 1:999            \n            c = 1000 - a - b\n            c >= 1 || continue\n            a^2 + b^2 == c^2 || continue                        \n            return a, b, c\n        end\n    end\nend;\n\np9()\n\n(200, 375, 425)\n\n\n\nusing BenchmarkTools;\n@benchmark p9()\n\nBenchmarkTools.Trial: 10000 samples with 1 evaluation.\n Range (min … max):  200.724 μs … 533.617 μs  ┊ GC (min … max): 0.00% … 0.00%\n Time  (median):     230.369 μs               ┊ GC (median):    0.00%\n Time  (mean ± σ):   235.254 μs ±  25.937 μs  ┊ GC (mean ± σ):  0.00% ± 0.00%\n\n     ▁▂ ▅▁▇▄█▅▄▅▃▂▂▂▂▁                                          ▂\n  ▇█▆██▆█████████████████▇▇▇▇▇▆▆▆▅▆▆▅▅▆▅▅▅▆▅▆▅▅▆▆▅▆▅▆▆▆▆▅▅▅▆▅▅▆ █\n  201 μs        Histogram: log(frequency) by time        368 μs <\n\n Memory estimate: 0 bytes, allocs estimate: 0.\n\n\n\n\nJulia (using JuMP)\n\nusing JuMP; using SCIP;\n\nfunction p9()\n  model = Model(SCIP.Optimizer)\n  set_silent(model)\n  @variable(model, a >= 1, Int)\n  @variable(model, b >= 1, Int)\n  @variable(model, c >= 1, Int)\n  @objective(model, Min, a)\n  @constraint(model, pitagorean, a^2 + b^2 == c^2)\n  @constraint(model, sum_1000, a + b + c == 1000)  \n  optimize!(model)    \n  return value(a), value(b), value(c)\nend;\np9()\n\n(200.0, 375.0, 425.0)\n\n\n\nusing BenchmarkTools;\n@benchmark p9()\n\nBenchmarkTools.Trial: 43 samples with 1 evaluation.\n Range (min … max):  110.162 ms … 146.802 ms  ┊ GC (min … max): 0.00% … 0.00%\n Time  (median):     116.656 ms               ┊ GC (median):    0.00%\n Time  (mean ± σ):   118.638 ms ±   7.604 ms  ┊ GC (mean ± σ):  0.00% ± 0.00%\n\n    ▅  ▅   ▅   █    ▂                                            \n  ▅▁████▅▅██▅█▁█▁▁▅▁██▅▅▁▁▅▁▅▁▁▁▁▁▁▁▁▁▁▁▁▅▅▁▁▁▅▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▅ ▁\n  110 ms           Histogram: frequency by time          147 ms <\n\n Memory estimate: 116.59 KiB, allocs estimate: 5097."
  },
  {
    "objectID": "p1_10.html#problem-10-1",
    "href": "p1_10.html#problem-10-1",
    "title": "1  Problems 1-10",
    "section": "Problem 10",
    "text": "Problem 10\n\n\n\n\n\n\nProblem\n\n\n\n\nThe sum of the primes below \\(10\\) is \\(2 + 3 + 5 + 7 = 17\\).\n\n\nFind the sum of all the primes below two million.\n\n\n\n\nJulia\n\nfunction p10()\n  sieve_of_eratosthenes(2_000_000) |> sum\nend;\np10()\n\n142913828922\n\n\n\nusing BenchmarkTools;\n@benchmark p10()\n\nBenchmarkTools.Trial: 491 samples with 1 evaluation.\n Range (min … max):   8.999 ms …  20.691 ms  ┊ GC (min … max): 0.00% … 4.68%\n Time  (median):      9.985 ms               ┊ GC (median):    0.00%\n Time  (mean ± σ):   10.174 ms ± 920.154 μs  ┊ GC (mean ± σ):  2.63% ± 3.63%\n\n         █▃▅█▇▄▃▆    ▄ ▂▂▁▃                                     \n  ▂▁▂▃▃▄▅████████▆▅▇▆██████▆▇▆▅▅▃▃▆▆▄▃▅▃▂▂▂▁▂▁▂▂▁▁▁▂▁▁▁▁▁▁▂▁▁▂ ▄\n  9 ms            Histogram: frequency by time         12.7 ms <\n\n Memory estimate: 16.63 MiB, allocs estimate: 8."
  }
]